---
title: "GAPMINDER | Tracking Progress Toward Universal Health Coverage; Insights from Service Coverage and Financial Protection"  
format: dashboard
  
---

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
from country_converter import CountryConverter
import country_converter as cc
import itables

# loading data sets
OOP_exp = pd.read_csv(
    r"C:\Users\timot\OneDrive\Desktop\graph_project\data\oope_current.csv"
)
uhc = pd.read_csv(
    r"C:\Users\timot\OneDrive\Desktop\graph_project\data\sh_uhc_srvs_cv_xd (2).csv"
)
who_regions=pd.read_excel(r"C:\Users\timot\OneDrive\Desktop\graph_project\data\WHO Country Region List.xlsx")
```


```{python}
OOP_exp_long=pd.melt(OOP_exp, id_vars="country", var_name="year", value_name="perc_out_of_pocket_health_exp").sort_values("year")

uhc_long=pd.melt(uhc, id_vars="country", var_name="year", value_name="uhc_service_coverage_index").sort_values("year")
```

```{python} 
# filtering for 2010,
OOP_exp_long_2021 = OOP_exp_long.query("year=='2021'").sort_values("country")
uhc_long_2021 = uhc_long.query("year=='2021'").sort_values("country")

# checking for the difference in data sets for countries
oop_set = set(OOP_exp_long_2021["country"])
uhc_set = set(uhc_long_2021["country"])
# oop_set-uhc_set



# uhc_set-oop_set



# merging the two data sets
df_merged = pd.merge(OOP_exp_long_2021, uhc_long_2021) 

df_merged_all_years =pd.merge(OOP_exp_long,uhc_long )
```

```{python}
# categorising the universal health coverage index
def UHC_cat(UHC_index):
    if UHC_index >= 80:
        return "HIgh Coverage"
    elif UHC_index >= 50:
        return "Moderate Coverage"
    elif UHC_index <= 49:
        return "Low Coverage"
    else:
        return "Uncategorised"


UHC_cat = np.vectorize(UHC_cat)

df_merged["UHC_service_Coverage_Index_Categories"] = UHC_cat(
    df_merged["uhc_service_coverage_index"]
)


# categorising out of pocket expenditure
def OOP_cat(OOP):
    if OOP >= 40:
        return "HIgh  OOP Expenditure"
    elif OOP >= 20:
        return "Moderate  OOP Expenditure"
    elif OOP <= 19:
        return "Low OOP Expenditure"
    else:
        return "Uncategorised"


OOP_cat = np.vectorize(OOP_cat)

df_merged["OOP_exp_Categories"] = OOP_cat(df_merged["perc_out_of_pocket_health_exp"])


# categorising countries into region


# getting country codes
df_merged["country_code"] = cc.convert(df_merged["country"], to="ISO3")
df_merged_all_years["country_code"] = cc.convert(df_merged_all_years["country"], to="ISO3")

who_regions["country_code"] = cc.convert(who_regions["Country"], to="ISO3")
who_regions = who_regions.drop(columns=["IncomeGroupCountry", "Country"])


# merging who regions and df_merged

df_merged = pd.merge(df_merged, who_regions)
df_merged_all_years= pd.merge(df_merged_all_years, who_regions, on= "country_code", how="left")

who_regions = {
    "AFR": "Africa Region",
    "AMR": "Americas Region",
    "EMR": "Eastern Mediterranean Region",
    "EUR": "European Region",
    "SEAR": "South-East Asia Region",
    "WPR": "Western Pacific Region",
}
# replace short forms with full forms
df_merged["WHO_Region"] = df_merged["Region"].replace(who_regions)
df_merged_all_years["WHO_Region"] = df_merged_all_years["Region"].replace(who_regions)
```

```{python}
# visualisations of universal health coverage:
UHC_map = px.choropleth(
    df_merged,
    locations="country_code",
    color="uhc_service_coverage_index",
    hover_name="country",
    title="MAp of countries by universal health coverage Index",
    color_continuous_scale="Greens",
)
# content for value boxes
# highest UHC,
highest_UHC = (
    df_merged.sort_values("uhc_service_coverage_index", ascending=False)
    .head(1)
    .squeeze()
)
highest_UHC_country = highest_UHC["country"]
highest_UHC_value = highest_UHC["uhc_service_coverage_index"]

# lowest HDI
lowest_UHC = (
    df_merged.sort_values("uhc_service_coverage_index", ascending=True)
    .head(1)
    .squeeze()
)
lowest_UHC_country = lowest_UHC["country"]
lowest_UHC_value = lowest_UHC["uhc_service_coverage_index"]

# AVERAGE HEALTH COVERAGE BY WHO _REGION
avg_uhc_by_region = (
    df_merged.groupby("WHO_Region")["uhc_service_coverage_index"].mean().reset_index()
)

# percentage of  countries fall under low coverage, high coverage
percentages = (
    df_merged["UHC_service_Coverage_Index_Categories"].value_counts(normalize=True)
    * 100
)

# AVERAGE HEALTH COVERAGE BY WHO _REGION
AVERAGE_HEALTH_COVERAGE_WHO_REGION = px.bar(
    avg_uhc_by_region,
    x="WHO_Region",
    y="uhc_service_coverage_index",
    color="WHO_Region",
    title="AVERAGE HEALTH COVERAGE BY WHO _REGION",
)
```

```{python}
# visualisations of percentage out of pocket of health expeniture:
oop_map = px.choropleth(
    df_merged,
    locations="country_code",
    color="perc_out_of_pocket_health_exp",
    hover_name="country",
    title="Map of countries by out of pocket expenditure (percentage of current health expenditure)",
    color_continuous_scale="Blues",
)
# content for value boxes
# highest UHC,
highest_OOP = (
    df_merged.sort_values("perc_out_of_pocket_health_exp", ascending=False)
    .head(1)
    .squeeze()
)
highest_OOP_country = highest_OOP["country"]
highest_OOP_value = highest_OOP["perc_out_of_pocket_health_exp"]

# lowest HDI
lowest_OOP = (
    df_merged.sort_values("uhc_service_coverage_index", ascending=True)
    .head(1)
    .squeeze()
)
lowest_OOP_country = lowest_OOP["country"]
lowest_OOP_value = lowest_OOP["uhc_service_coverage_index"]

# AVERAGE HEALTH COVERAGE BY WHO _REGION
avg_oop_by_region = (
    df_merged.groupby("WHO_Region")["perc_out_of_pocket_health_exp"]
    .mean()
    .reset_index()
)

# percentage of  countries fall under low coverage, high coverage
percentages = (
    df_merged["UHC_service_Coverage_Index_Categories"].value_counts(normalize=True)
    * 100
)


# AVERAGE oop_expenditure BY WHO _REGION

Box_plot_oop_expenditure_WHO_REGION = px.box(
    df_merged,
    color="WHO_Region",
    title="Average out of pocket expenditure (percentage of current health expenditure) WHO _regions",
    x="WHO_Region",
    y="perc_out_of_pocket_health_exp",
).update_layout(
    margin=dict(
        t=50, b=50, l=50, r=120
    ),  # Adjust the right margin to avoid cutting off
    legend=dict(
        x=1.05,  # Position the legend outside the plot
        y=1,
        orientation="v",  # Vertical legend orientation
        title_font=dict(size=10),  # Reduce font size of legend title
        font=dict(size=10),  # Adjust font size of legend text
    ),
)

# display a table for region wise data


# visualisations of relationship:
relationship_scatter = px.scatter(
    df_merged,
    x="perc_out_of_pocket_health_exp",
    y="uhc_service_coverage_index",
    color="country",
    size="uhc_service_coverage_index",
    title="Map of countries by out of pocket expenditure (percentage of current health expenditure)",
).update_layout(
    margin=dict(
        t=50, b=50, l=50, r=120
    ),  # Adjust the right margin to avoid cutting off
    legend=dict(
        x=1.05,  # Position the legend outside the plot
        y=1,
        orientation="v",  # Vertical legend orientation
        title_font=dict(size=10),  # Reduce font size of legend title
        font=dict(size=10),  # Adjust font size of legend text
    ),
)


# content for value boxes


# AVERAGE HEALTH COVERAGE BY WHO _REGION
avg_oop_by_region = (
    df_merged.groupby("WHO_Region")["perc_out_of_pocket_health_exp"]
    .mean()
    .reset_index()
)

```


# visualisations of universal health coverage:
## Row 1 {height=20%}
::: {.valuebox icon="graph-up" color="#1E90FF" title="Highest universal health coverage"}
```{python}
# Display percentage for Category A
f"Percentage Moderate Coverage: {percentages['Moderate Coverage']:.2f}%"
```
:::
::: {.valuebox icon="graph-down" color="#87CEFA"} 
```{python}
# Display percentage for Category B
f"{percentages['Low Coverage']:.2f}% have Low Coverage:"

```
:::
::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
```{python}
# Display percentage for Category C
f"Percentage HIgh Coverage: {percentages['HIgh Coverage']:.2f}%"
```
:::
::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
UHC Score for Africa
78.33
fooUpdated as of 2024
:::

## Row 2 {height=80%}
### {width=60%}
```{python}
UHC_map
```
### {width=40%}
```{python}
AVERAGE_HEALTH_COVERAGE_WHO_REGION.update_layout(
    margin=dict(
        t=50, b=50, l=50, r=120
    ),  # Adjust the right margin to avoid cutting off
    legend=dict(
        x=1.05,  # Position the legend outside the plot
        y=1,
        orientation="v",  # Vertical legend orientation
        title_font=dict(size=10),  # Reduce font size of legend title
        font=dict(size=10),  # Adjust font size of legend text
    ),
)

```


# Out of Pocket Expenditure
## Row 1 {height=20%}
::: {.valuebox icon="graph-up" color="#1E90FF" title="Highest Out of Pocket Expenditure"}
header: UHC Score for Africa
value: 78.33
footer: Updated as of 2024
```{python}
# Display percentage for Category A
f"Percentage Moderate Coverage: {percentages['Moderate Coverage']:.2f}%"
```
:::

::: {.valuebox icon="graph-down" color="#87CEFA" title="Lowest Out of Pocket Expenditure"} 
```{python}
# Display percentage for Category B
f"Percentage Low Coverage: {percentages['Low Coverage']:.2f}%"
```
:::

::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
```{python}
# Display percentage for Category C
f"Percentage HIgh Coverage: {percentages['HIgh Coverage']:.2f}%"
```
:::

## Row 2 {height=80%}

### { .tabset width=80%}
#### 2021 Regional Out of Pocket Expenditure 
```{python}
# oop_map
Box_plot_oop_expenditure_WHO_REGION
```
#### 2000 - 2021 trend of Out of Pocket Expenditure
```{python}
# | title: Population
px.area(
    df_merged_all_years,
    x="year",
    y="perc_out_of_pocket_health_exp",
    color="WHO_Region",
    line_group="country",
).update_layout(
    margin=dict(
        t=50, b=50, l=50, r=120
    ),  # Adjust the right margin to avoid cutting off
    legend=dict(
        x=1.05,  # Position the legend outside the plot
        y=1,
        orientation="v",  # Vertical legend orientation
        title_font=dict(size=10),  # Reduce font size of legend title
        font=dict(size=10),  # Adjust font size of legend text
    ),
)

```

### {width=20%}

Africa shows markedly lower life expectancy figures compared to other continents,
reflecting significant developmental challenges. 
Europe and Oceania demonstrate the most consistently high life expectancies, 
while Asia and the Americas show greater variability, 
indicating diverse development stages within these regions.


# Relationship
## Row 1 {height=40%}

```{python}
# Create regional summary
reg_summary = (
    df_merged.groupby("WHO_Region")
    .apply(
        lambda g: pd.Series(
            {
                "Average uhc_service_coverage_index": df_merged[
                    "uhc_service_coverage_index"
                ].mean(),
                "Lowest uhc_service_coverage_index": df_merged[
                    "uhc_service_coverage_index"
                ].min(),
                "Country with uhc_service_coverage_index": df_merged.loc[
                    df_merged["uhc_service_coverage_index"].idxmin(), "country"
                ],
                "Highest perc_out_of_pocket_health_exp": df_merged[
                    "perc_out_of_pocket_health_exp"
                ].max(),
                "Country with Highest perc_out_of_pocket_health_exp": df_merged.loc[
                    df_merged["perc_out_of_pocket_health_exp"].idxmax(), "country"
                ],
            }
        )
    )
    .round(2)
)

itables.show(reg_summary)
```

## Row 2 {height=60%}

### {width=80%}
```{python}
# relationship_scatter
# | title: GDP and Life Expectancy

###### tomorrow, create a new data set which retains the years and make this plot.########
df_merged_all_years = df_merged_all_years.dropna(subset=["WHO_Region"])
fig = px.scatter(
    df_merged_all_years,
    x="uhc_service_coverage_index",
    y="perc_out_of_pocket_health_exp",
    animation_frame="year",
    animation_group="country",
    color="WHO_Region",
    hover_name="country",
    facet_col="WHO_Region",
    log_x=True,
    size_max=54,
    range_x=[10, 90],
    range_y=[1, 90],
)
fig.update_layout(
    margin=dict(
        t=50, b=50, l=50, r=120
    ),  # Adjust the right margin to avoid cutting off
    legend=dict(
        x=1.05,  # Position the legend outside the plot
        y=1,
        orientation="v",  # Vertical legend orientation
        title_font=dict(size=10),  # Reduce font size of legend title
        font=dict(size=10),  # Adjust font size of legend text
    ),
    annotations=[
        dict(
            text=annotation["text"].replace("WHO_Region=", ""),  # Remove "WHO_Region="
            x=annotation["x"],
            y=annotation["y"],
            xanchor="center",
            yanchor="bottom",
            showarrow=False,
        )
        for annotation in fig.layout.annotations  # Iterate over annotations
    ],
)
```

### {width=20%}

Africa shows markedly lower life expectancy figures compared to other continents,
reflecting significant developmental challenges. 
Europe and Oceania demonstrate the most consistently high life expectancies, 
while Asia and the Americas show greater variability, 
indicating diverse development stages within these regions.


# DATA DOWNLOAD

```{python}
# Display full dataset with itables

```










