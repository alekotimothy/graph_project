---
title: "GAPMINDER | Human development Index and Vaccine coverage"  
format: 
    dashboard: 
        theme: slate 
---

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
from country_converter import CountryConverter
import country_converter as cc
import itables
import pycountry
import requests

# loading data
HDI = pd.read_excel(
    r"D:\data sience\github\graph_course_python_git\timothy_aleko_final _project.qmd\project_data\universal heath coverage and inequality\HDR23-24_Statistical_Annex_HDI_Table.xlsx"
)

six_vacc_rate = pd.read_csv(
    r"D:\data sience\github\graph_course_python_git\timothy_aleko_final _project.qmd\project_data\universal heath coverage and inequality\six_vacc_rate.csv"
)
df = pd.read_csv(r"C:\Users\timot\OneDrive\Desktop\graph_project\project.csv")

# dropping irrelevant columns
HDI = HDI.drop(
    columns=["HDI rank(2021)", "GNI per capita rank minus HDI rank_2022", "HDI rank"]
)
#

## renaming the columns
HDI = HDI.rename(
    columns={
        "Country": "country",
        "Human Development Index (HDI)_2022": "HDI_2022",
        "Life expectancy at birth_2022": "Life_expectancy_at_birth_2022",
        "Expected years of schooling_2022": "Expected_years_of_schooling_2022",
        "Mean years of schooling_2022": "Mean_years_of_schooling_2022",
        "Gross national income (GNI) per capita_2022": "GNI_per_capita_2022",
    }
)


## quering rows to retain [uganda, nigeria, uk and south_Africa]

HDI_mini = HDI.query(
    "country=='Uganda'|country=='Nigeria' |country=='South Africa' |country=='United Kingdom'"
)


# vaccination rates

six_vacc_rate_mini = six_vacc_rate.query(
    "country=='Uganda'|country=='Nigeria' |country=='South Africa' |country=='United Kingdom'"
)


## re -orienting data sets( melting the wide to long)

six_vacc_rate_mini_long = six_vacc_rate_mini.melt(
    id_vars="country", var_name="year", value_name="vaccination rates"
).sort_values("year")


six_vacc_rate_long = six_vacc_rate.melt(
    id_vars="country", var_name="year", value_name="vaccination rates"
).sort_values("year")


# querying for data of only 2022
six_vacc_rate_long_2022 = six_vacc_rate_long.query("year=='2022'")


# dropping the year column
six_vacc_rate_long_2022 = six_vacc_rate_long_2022.drop(columns="year")


### visualisation_1.

vac_rate_fig = px.line(
    six_vacc_rate_mini_long,
    x="year",
    y="vaccination rates",
    color="country",
    title="Trend of the percentage of 1-year olds who got the six basic vaccines: BCG,HepB3, HIB3, MCV1, Pol3, DPTP3. ",
)


# merging Data_sets

HDI["country_code"] = cc.convert(HDI["country"], to="ISO3")
six_vacc_rate_long_2022["country_code"] = cc.convert(
    six_vacc_rate_long_2022["country"], to="ISO3"
)

df = pd.merge(six_vacc_rate_long_2022, HDI, how="inner", on=["country_code"])

df["country_name"] = cc.convert(df["country_code"], to="name_official")

df = df.drop(columns=["country_x", "country_y"])


# categorising countries in human development groups
def H_D_group(HDI):
    if HDI >= 0.902:
        return "Very high human development"
    elif HDI >= 0.700:
        return "High human development"
    elif HDI >= 0.550:
        return "Medium human development"
    elif HDI <= 0.549:
        return "Low human development"
    else:
        return "not categorised"


H_D_group = np.vectorize(H_D_group)
HDI["Human_Development_Groups"] = H_D_group(HDI["HDI_2022"])


# establishing a relationship betn hdi and vaccination coverage
relationship = px.scatter(
    df,
    x="HDI_2022",
    y="vaccination rates",
    size="GNI_per_capita_2022",
    color="country_name",
)

# highest HDI,
highest_HDI = HDI.sort_values("HDI_2022", ascending=False).head(1).squeeze()
highest_HDI_country = highest_HDI["country"]
highest_HDI_value = highest_HDI["HDI_2022"]

# lowest HDI
lowest_HDI = HDI.sort_values("HDI_2022", ascending=True).head(1).squeeze()
lowest_HDI_country = lowest_HDI["country"]
lowest_HDI_value = lowest_HDI["HDI_2022"]


# UG HDI and VAccination rate
ug_HDI = HDI.query("country=='Uganda'").squeeze()
ug_Life_expectancy_at_birth_2022 = ug_HDI["Life_expectancy_at_birth_2022"]
ug_Mean_years_of_schooling_2022 = ug_HDI["Mean_years_of_schooling_2022"]
ug_GNI_per_capita_2022 = ug_HDI["GNI_per_capita_2022"]
ug_HDI_value = ug_HDI["HDI_2022"]


# HDI_ map
HDI_map = px.choropleth(
    HDI,
    locations="country_code",
    color="HDI_2022",
    hover_name="country",
    title="MAp of countries by Human development index",
    color_continuous_scale="Greens",
)


# largest 20 countries by HDI with a green color scale;
# HDI_20 = HDI.nlargest(20, "")

import pycountry
import requests


# Function to fetch region using REST Countries API
def get_region_from_api(country_name):
    try:
        # Call the API (e.g., REST Countries API)
        response = requests.get(f"https://restcountries.com/v3.1/name/{country_name}")
        if response.status_code == 200:
            country_data = response.json()
            # Extract region information
            return country_data[0].get("region", "Unknown")
    except Exception as e:
        print(f"Error fetching region for {country_name}: {e}")
    return "Unknown"


# Automate the regional assignment
df["Region"] = df["country_name"].apply(get_region_from_api)
df.to_csv(
    r"C:\Users\timot\OneDrive\Desktop\graph_project\project_2_files/project.csv",
    index=False,
)
HDI_Region_fig = px.histogram(
    df,
    x="Region",
    y="HDI_2022",
    color="Region",
    title="Human Development Index for select countries in 2022",
)
```



# Human development Index 2022

## Row 1 {height=30%}

::: {.valuebox icon="graph-up" color="#1E90FF" title="Highest Human Development Index"}

`{python} highest_HDI_value`

`{python} highest_HDI_country`

:::

::: {.valuebox icon="graph-down" color="#87CEFA" title="Lowest Human Development Index"} 

`{python} str(lowest_HDI_value)`

`{python} lowest_HDI_country`

:::

::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
`{python} str(ug_HDI_value)`
:::

::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
`{python} str(ug_HDI_value)`
:::


## Row 2 {height=60%}

### {width=70%}
---
```{python}
HDI_map
```

### {width=40%}

```{python}
HDI_Region_fig
```


# Vaccine Coverage



## Row 1 {height=30%}

::: {.valuebox icon="graph-up" color="#1E90FF" title="Highest Human Development Index"}

`{python} highest_HDI_value`

`{python} highest_HDI_country`

:::

::: {.valuebox icon="graph-down" color="#87CEFA" title="Lowest Human Development Index"} 

`{python} str(lowest_HDI_value)`

`{python} lowest_HDI_country`

:::

::: {.valuebox icon="geo-alt" color="#4682B4" title="Uganda HDI"}
`{python} str(ug_HDI_value)`
:::

## Row 2 {height=60%}

### {width=70%}
---

```{python}
continent_fig = px.box(
    df,
    x="Region",
    y="vaccination rates",
    color="Region",
    title="Vaccination coverage by Continent",
    points="all",  # This shows all data points
    hover_data=["country_name"],  # This adds country names to hover info
    color_discrete_sequence=px.colors.sequential.Turbo,  # Built-in Blues palette
).update_layout(
    showlegend=False, xaxis_title="Continent", yaxis_title="Vaccination Coverage (%)"
)

continent_fig
```

### {width=40%}

Africa shows markedly lower life expectancy figures compared to other continents, reflecting significant developmental challenges. Europe and Oceania demonstrate the most consistently high life expectancies, while Asia and the Americas show greater variability, indicating diverse development stages within these regions.



# Relationship



## Row 1 {height=30%}

```{python}
# Create regional summary
reg_summary = (
    df.groupby("Region")
    .apply(
        lambda g: pd.Series(
            {
                "Average vaccination coverage": g["vaccination rates"].mean(),
                "Lowest Vaccination Coverage": g["vaccination rates"].min(),
                "Country with Lowest HDI": g.loc[
                    g["HDI_2022"].idxmin(), "country_name"
                ],
                "Highest HDI": g["HDI_2022"].max(),
                "Country with Highest HDI": g.loc[
                    g["HDI_2022"].idxmax(), "country_name"
                ],
            }
        )
    )
    .round(2)
)

itables.show(reg_summary)
```

## Row 2 {height=60%}

### {width=70%}
---
```{python}
relationship
```

### {width=40%}

Africa shows markedly lower life expectancy figures compared to other continents, reflecting significant developmental challenges. Europe and Oceania demonstrate the most consistently high life expectancies, while Asia and the Americas show greater variability, indicating diverse development stages within these regions.


# DATA DOWNLOAD

```{python}
# Display full dataset with itables

```




This data comes from the python `plotly.express` library’s `gapminder` dataset, which is originally sourced from the Gapminder Foundation.

The Gapminder Foundation is a non-profit venture that promotes sustainable global development and achievement of the United Nations Millennium Development Goals by increasing use and understanding of statistics and other information about social, economic, and environmental development.

**Watch Hans Rosling’s TED Talk:**

<iframe width="560" height="315" src="https://www.youtube.com/embed/hVimVzgtD6w?si=dKHepC5EXhjaXOe2" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
